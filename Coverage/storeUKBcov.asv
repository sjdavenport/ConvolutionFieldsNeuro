function [maxnmin, LKCs, alphathresholds] = storeUKBcov( RSfolder, nsubj, params, do_gsubsets )
% storeUKBcov( RSfolder, nsubj, params, subsets )
%--------------------------------------------------------------------------
% ARGUMENTS
% Mandatory
% Optional
%--------------------------------------------------------------------------
% OUTPUT
% 
%--------------------------------------------------------------------------
% EXAMPLES
% 
%--------------------------------------------------------------------------
% AUTHOR: Samuel Davenport
%--------------------------------------------------------------------------

%%  Check mandatory input and get important constants
%--------------------------------------------------------------------------

%%  Add/check optional values
%--------------------------------------------------------------------------
if iscell(subsets)
    niters = length(subsets);
else
    niters = subsets;
    subsets = cell(1, niters);
    
    global jalaloc
    load([jalaloc, 'feat_stuff/runfeat/', RSfolder, '/warped_subj_ids'], 'subj_ids');
    sids = intersect(subj_ids.cope, subj_ids.mask);
    total_nsubj = length(sids);
    for I = 1:niters
        subsets{I} = randsample(total_nsubj, nsubj, 0);
    end
end

%%  Main Function Loop
%--------------------------------------------------------------------------
% Initialize the maxnmin structure
maxnmin = struct();

% Initialize vectors to store the maxima
maxnmin.latmaxima     = zeros( 1, niters );
maxnmin.finelatmaxima = zeros( 1, niters );
maxnmin.convmaxima    = zeros( 1, niters );

% Initialize vectors to store the minima
maxnmin.latminima     = zeros( 1, niters );
maxnmin.finelatminima = zeros( 1, niters );
maxnmin.convminima    = zeros( 1, niters );

% Initialize matrices to store the alpha thresholds and the LKCs
alphathresholds = zeros( 1, niters );
LKCs.L = zeros( D, niters );
LKCs.L0 = zeros(1, niters);

% Initialize matrices to store all of the high maxima and low minima
maxnmin.allmaxima = zeros( npeaks, niters );
maxnmin.allminima = zeros( npeaks, niters );

% Obtain the sample function that draws the data
spfn = getUKBspfn( RSfolder, do_gauss, 'sample_intersect' );


for I = 1:niters
    %Display I if mod(I,10) = 0
    modul(I,10)
    
    % Obtain the data
    lat_data = spfn(subsets{I});

    lat_data = Mask(lat_data);
    [ ~, threshold, maximum, L, minimum ] = vRFT(lat_data, params, npeaks, 1, version);
    LKCs.L(:,b) = L.L';
    LKCs.L0(b) = L.L0;
    if any(isnan(L))
        warning('NAN LKC recorded')
    end
    
    % Record the maxima 
    maxnmin.latmaxima(b) = maximum.lat;
    maxnmin.finelatmaxima(b) = maximum.finelat;
    maxnmin.convmaxima(b) = maximum.conv;
    maxnmin.allmaxima(1:npeaks,b) = maximum.allmaxima';
    maxnmin.alphathresholds(b) = threshold;
    
    % Error checking loop 
    if maximum.finelat > maximum.conv + 10^(-2)
        a = 1
    end
    
    % Record the minima
    maxnmin.latminima(b) = minimum.lat;
    maxnmin.finelatminima(b) = minimum.finelat;
    maxnmin.convminima(b) = minimum.conv;
    maxnmin.allminima(1:npeaks,b) = minimum.allmminima';
end

end

